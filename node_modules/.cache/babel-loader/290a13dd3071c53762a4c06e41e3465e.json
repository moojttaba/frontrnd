{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyA1Klmha7h2e8hDteEBcpR3BIcVEzKE8ns\",\n  authDomain: \"biareh-2a437.firebaseapp.com\",\n  databaseURL: \"https://biareh-2a437.firebaseio.com\",\n  projectId: \"biareh-2a437\",\n  storageBucket: \"biareh-2a437.appspot.com\",\n  messagingSenderId: \"505232216584\",\n  appId: \"1:505232216584:web:7ecae9cbcd8b768491b7bd\",\n  measurementId: \"G-XSB7XNYSXS\"\n};\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  } else {}\n\n  return userRef;\n};\nexport const getUserCartRef = async userId => {\n  const cartsRef = firestore.collection(\"carts\").where(\"userId\", \"==\", userId);\n  const snapShot = await cartsRef.get();\n\n  if (snapShot.empty) {\n    const cartDocRef = firestore.collection(\"carts\").doc();\n    await cartDocRef.set({\n      userId,\n      cartItems: []\n    });\n    return cartDocRef;\n  } else {\n    return snapShot.docs[0].ref;\n  }\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nfirebase.auth().onAuthStateChanged(function (user) {\n  console.log(user);\n});\nexport const auth = firebase.auth();\nexport const credential = firebase.auth.EmailAuthProvider.credential;\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase; //////////////////////////////////////////////////////////////////////////////////////////////AUTH\n\n/*\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData,\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  } else {\n  }\n\n  return userRef;\n};\n*/\n// export const MyUserDataRepo = async (userAuth, additionalData) => {\n//   if (!userAuth) return;\n//   const userRef = firestore.doc(`users/${userAuth.uid}`);\n//   const snapShot = await userRef.get();\n//   if (!snapShot.exists) {\n//     const { displayName, email } = userAuth;\n//     const createdAt = new Date();\n//     try {\n//       await userRef.set({\n//         displayName,\n//         email,\n//         createdAt,\n//         ...additionalData,\n//       });\n//     } catch (error) {\n//       console.log(\"error creating user\", error.message);\n//     }\n//   } else {\n//   }\n//   return userRef;\n// };\n// MyUserDataRepo.prototype.merge = function (data1, data2) {\n//   // TODO(you): How you implement this is specific to your application!\n//   return {\n//     ...data1,\n//     ...data2,\n//   };\n// };\n// MyUserDataRepo.prototype.set = function (user, data) {\n//   // TODO(you): How you implement this is specific to your application!\n// };\n// MyUserDataRepo.prototype.delete = function (user) {\n//   // TODO(you): How you implement this is specific to your application!\n// };\n// MyUserDataRepo.prototype.get = function (user) {\n//   // TODO(you): How you implement this is specific to your application!\n//   return {};\n// };\n// function getProviders() {\n//   // [START auth_get_providers]\n//   const googleProvider = new firebase.auth.GoogleAuthProvider();\n//   const facebookProvider = new firebase.auth.FacebookAuthProvider();\n//   const twitterProvider = new firebase.auth.TwitterAuthProvider();\n//   const githubProvider = new firebase.auth.GithubAuthProvider();\n//   // [END auth_get_providers]\n// }\n// function simpleLink(credential) {\n//   // [START auth_simple_link]\n//   auth.currentUser\n//     .linkWithCredential(credential)\n//     .then(function (usercred) {\n//       const user = usercred.user;\n//       console.log(\"Account linking success\", user);\n//     })\n//     .catch(function (error) {\n//       console.log(\"Account linking error\", error);\n//     });\n//   // [END auth_simple_link]\n// }\n// export function anonymousLink(credential) {\n//   // [START auth_anonymous_link]\n//   auth.currentUser\n//     .linkWithCredential(credential)\n//     .then(function (usercred) {\n//       const user = usercred.user;\n//       console.log(\"Anonymous account successfully upgraded\", user);\n//     })\n//     .catch(function (error) {\n//       console.log(\"Error upgrading anonymous account\", error);\n//     });\n//   // [END auth_anonymous_link]\n// }\n// export function linkWithPopup() {\n//   const provider = new firebase.auth.GoogleAuthProvider();\n//   // [START auth_link_with_popup]\n//   auth.currentUser\n//     .linkWithPopup(provider)\n//     .then(function (result) {\n//       // Accounts successfully linked.\n//       const credential = result.credential;\n//       const user = result.user;\n//       // ...\n//     })\n//     .catch(function (error) {\n//       // Handle Errors here.\n//       // ...\n//     });\n//   // [END auth_link_with_popup]\n// }\n// export function linkWithRedirect() {\n//   const provider = new firebase.auth.GoogleAuthProvider();\n//   // [START auth_link_with_redirect]\n//   auth.currentUser.linkWithRedirect(provider).then(/* ... */).catch(/* ... */);\n//   // [END auth_link_with_redirect]\n//   // [START auth_get_redirect_result]\n//   auth\n//     .getRedirectResult()\n//     .then(function (result) {\n//       if (result.credential) {\n//         // Accounts successfully linked.\n//         const credential = result.credential;\n//         const user = result.user;\n//         // ...\n//       }\n//     })\n//     .catch(function (error) {\n//       // Handle Errors here.\n//       // ...\n//     });\n//   // [END auth_get_redirect_result]\n// }\n// export function mergeAccounts(newCredential) {\n//   // [START auth_merge_accounts]\n//   // The implementation of how you store your user data depends on your application\n//   const repo = new MyUserDataRepo();\n//   // Get reference to the currently signed-in user\n//   const prevUser = auth.currentUser;\n//   // Get the data which you will want to merge. This should be done now\n//   // while the app is still signed in as this user.\n//   const prevUserData = repo.get(prevUser);\n//   // Delete the user's data now, we will restore it if the merge fails\n//   repo.delete(prevUser);\n//   // Sign in user with the account you want to link to\n//   auth\n//     .signInWithCredential(newCredential)\n//     .then(function (result) {\n//       console.log(\"Sign In Success\", result);\n//       const currentUser = result.user;\n//       const currentUserData = repo.get(currentUser);\n//       // Merge prevUser and currentUser data stored in Firebase.\n//       // Note: How you handle this is specific to your application\n//       const mergedData = repo.merge(prevUserData, currentUserData);\n//       return prevUser\n//         .linkWithCredential(result.credential)\n//         .then(function (linkResult) {\n//           // Sign in with the newly linked credential\n//           return auth.signInWithCredential(linkResult.credential);\n//         })\n//         .then(function (signInResult) {\n//           // Save the merged data to the new user\n//           repo.set(signInResult.user, mergedData);\n//         });\n//     })\n//     .catch(function (error) {\n//       // If there are errors we want to undo the data merge/deletion\n//       console.log(\"Sign In Error\", error);\n//       repo.set(prevUser, prevUserData);\n//     });\n//   // [END auth_merge_accounts]\n// }\n// export const makeEmailCredential = firebase.auth.EmailAuthProvider.credential;\n// function unlink(providerId) {\n//   const user = auth.currentUser;\n//   // [START auth_unlink_provider]\n//   user\n//     .unlink(providerId)\n//     .then(function () {\n//       // Auth provider unlinked from account\n//       // ...\n//     })\n//     .catch(function (error) {\n//       // An error happened\n//       // ...\n//     });\n//   // [END auth_unlink_provider]\n// }","map":{"version":3,"sources":["/Users/mojtaba/Desktop/biareh-app/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","getUserCartRef","userId","cartsRef","collection","where","empty","cartDocRef","cartItems","docs","ref","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","user","credential","EmailAuthProvider","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nconst config = {\n  apiKey: \"AIzaSyA1Klmha7h2e8hDteEBcpR3BIcVEzKE8ns\",\n  authDomain: \"biareh-2a437.firebaseapp.com\",\n  databaseURL: \"https://biareh-2a437.firebaseio.com\",\n  projectId: \"biareh-2a437\",\n  storageBucket: \"biareh-2a437.appspot.com\",\n  messagingSenderId: \"505232216584\",\n  appId: \"1:505232216584:web:7ecae9cbcd8b768491b7bd\",\n  measurementId: \"G-XSB7XNYSXS\",\n};\n\nfirebase.initializeApp(config);\n\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData,\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  } else {\n  }\n\n  return userRef;\n};\n\nexport const getUserCartRef = async (userId) => {\n  const cartsRef = firestore.collection(\"carts\").where(\"userId\", \"==\", userId);\n  const snapShot = await cartsRef.get();\n\n  if (snapShot.empty) {\n    const cartDocRef = firestore.collection(\"carts\").doc();\n    await cartDocRef.set({ userId, cartItems: [] });\n    return cartDocRef;\n  } else {\n    return snapShot.docs[0].ref;\n  }\n};\n\nexport const addCollectionAndDocuments = async (\n  collectionKey,\n  objectsToAdd\n) => {\n  const collectionRef = firestore.collection(collectionKey);\n\n  const batch = firestore.batch();\n  objectsToAdd.forEach((obj) => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n\n  return await batch.commit();\n};\n\nexport const convertCollectionsSnapshotToMap = (collections) => {\n  const transformedCollection = collections.docs.map((doc) => {\n    const { title, items } = doc.data();\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items,\n    };\n  });\n\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\n\nfirebase.auth().onAuthStateChanged(function (user) {\n  console.log(user);\n});\n\nexport const auth = firebase.auth();\nexport const credential = firebase.auth.EmailAuthProvider.credential;\n\nexport const firestore = firebase.firestore();\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: \"select_account\" });\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\n\nexport default firebase;\n\n//////////////////////////////////////////////////////////////////////////////////////////////AUTH\n/*\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData,\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  } else {\n  }\n\n  return userRef;\n};\n*/\n\n// export const MyUserDataRepo = async (userAuth, additionalData) => {\n//   if (!userAuth) return;\n\n//   const userRef = firestore.doc(`users/${userAuth.uid}`);\n//   const snapShot = await userRef.get();\n\n//   if (!snapShot.exists) {\n//     const { displayName, email } = userAuth;\n//     const createdAt = new Date();\n\n//     try {\n//       await userRef.set({\n//         displayName,\n//         email,\n//         createdAt,\n//         ...additionalData,\n//       });\n//     } catch (error) {\n//       console.log(\"error creating user\", error.message);\n//     }\n//   } else {\n//   }\n\n//   return userRef;\n// };\n\n// MyUserDataRepo.prototype.merge = function (data1, data2) {\n//   // TODO(you): How you implement this is specific to your application!\n//   return {\n//     ...data1,\n//     ...data2,\n//   };\n// };\n\n// MyUserDataRepo.prototype.set = function (user, data) {\n//   // TODO(you): How you implement this is specific to your application!\n// };\n\n// MyUserDataRepo.prototype.delete = function (user) {\n//   // TODO(you): How you implement this is specific to your application!\n// };\n\n// MyUserDataRepo.prototype.get = function (user) {\n//   // TODO(you): How you implement this is specific to your application!\n//   return {};\n// };\n\n// function getProviders() {\n//   // [START auth_get_providers]\n//   const googleProvider = new firebase.auth.GoogleAuthProvider();\n//   const facebookProvider = new firebase.auth.FacebookAuthProvider();\n//   const twitterProvider = new firebase.auth.TwitterAuthProvider();\n//   const githubProvider = new firebase.auth.GithubAuthProvider();\n//   // [END auth_get_providers]\n// }\n\n// function simpleLink(credential) {\n//   // [START auth_simple_link]\n//   auth.currentUser\n//     .linkWithCredential(credential)\n//     .then(function (usercred) {\n//       const user = usercred.user;\n//       console.log(\"Account linking success\", user);\n//     })\n//     .catch(function (error) {\n//       console.log(\"Account linking error\", error);\n//     });\n//   // [END auth_simple_link]\n// }\n\n// export function anonymousLink(credential) {\n//   // [START auth_anonymous_link]\n//   auth.currentUser\n//     .linkWithCredential(credential)\n//     .then(function (usercred) {\n//       const user = usercred.user;\n//       console.log(\"Anonymous account successfully upgraded\", user);\n//     })\n//     .catch(function (error) {\n//       console.log(\"Error upgrading anonymous account\", error);\n//     });\n//   // [END auth_anonymous_link]\n// }\n\n// export function linkWithPopup() {\n//   const provider = new firebase.auth.GoogleAuthProvider();\n//   // [START auth_link_with_popup]\n//   auth.currentUser\n//     .linkWithPopup(provider)\n//     .then(function (result) {\n//       // Accounts successfully linked.\n//       const credential = result.credential;\n//       const user = result.user;\n//       // ...\n//     })\n//     .catch(function (error) {\n//       // Handle Errors here.\n//       // ...\n//     });\n//   // [END auth_link_with_popup]\n// }\n\n// export function linkWithRedirect() {\n//   const provider = new firebase.auth.GoogleAuthProvider();\n\n//   // [START auth_link_with_redirect]\n//   auth.currentUser.linkWithRedirect(provider).then(/* ... */).catch(/* ... */);\n//   // [END auth_link_with_redirect]\n\n//   // [START auth_get_redirect_result]\n//   auth\n//     .getRedirectResult()\n//     .then(function (result) {\n//       if (result.credential) {\n//         // Accounts successfully linked.\n//         const credential = result.credential;\n//         const user = result.user;\n//         // ...\n//       }\n//     })\n//     .catch(function (error) {\n//       // Handle Errors here.\n//       // ...\n//     });\n//   // [END auth_get_redirect_result]\n// }\n\n// export function mergeAccounts(newCredential) {\n//   // [START auth_merge_accounts]\n//   // The implementation of how you store your user data depends on your application\n\n//   const repo = new MyUserDataRepo();\n//   // Get reference to the currently signed-in user\n//   const prevUser = auth.currentUser;\n//   // Get the data which you will want to merge. This should be done now\n//   // while the app is still signed in as this user.\n//   const prevUserData = repo.get(prevUser);\n//   // Delete the user's data now, we will restore it if the merge fails\n//   repo.delete(prevUser);\n\n//   // Sign in user with the account you want to link to\n//   auth\n//     .signInWithCredential(newCredential)\n//     .then(function (result) {\n//       console.log(\"Sign In Success\", result);\n//       const currentUser = result.user;\n//       const currentUserData = repo.get(currentUser);\n\n//       // Merge prevUser and currentUser data stored in Firebase.\n//       // Note: How you handle this is specific to your application\n//       const mergedData = repo.merge(prevUserData, currentUserData);\n\n//       return prevUser\n//         .linkWithCredential(result.credential)\n//         .then(function (linkResult) {\n//           // Sign in with the newly linked credential\n//           return auth.signInWithCredential(linkResult.credential);\n//         })\n//         .then(function (signInResult) {\n//           // Save the merged data to the new user\n//           repo.set(signInResult.user, mergedData);\n//         });\n//     })\n//     .catch(function (error) {\n//       // If there are errors we want to undo the data merge/deletion\n//       console.log(\"Sign In Error\", error);\n//       repo.set(prevUser, prevUserData);\n//     });\n//   // [END auth_merge_accounts]\n// }\n\n// export const makeEmailCredential = firebase.auth.EmailAuthProvider.credential;\n\n// function unlink(providerId) {\n//   const user = auth.currentUser;\n\n//   // [START auth_unlink_provider]\n//   user\n//     .unlink(providerId)\n//     .then(function () {\n//       // Auth provider unlinked from account\n//       // ...\n//     })\n//     .catch(function (error) {\n//       // An error happened\n//       // ...\n//     });\n//   // [END auth_unlink_provider]\n// }\n"]},"metadata":{},"sourceType":"module"}